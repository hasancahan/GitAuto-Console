#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GitAuto GUI - Windows Uygulamasƒ±
Modern ve kullanƒ±cƒ± dostu aray√ºz ile Git repository y√∂netimi
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import os
import subprocess
import sys
from pathlib import Path
import threading
import queue

class GitAutoGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ GitAuto - Otomatik Git Repository Yayƒ±nlama")
        self.root.geometry("900x800")
        self.root.resizable(True, True)
        
        # Modern stil tanƒ±mlamalarƒ±
        self.setup_styles()
        
        # Ana deƒüi≈ükenler
        self.project_name = tk.StringVar()
        self.github_username = tk.StringVar()
        self.commit_message = tk.StringVar(value="first commit")
        self.selected_branch = tk.StringVar(value="main")
        self.current_directory = os.getcwd()
        
        # Git durumu
        self.git_installed = False
        self.git_repo_exists = False
        
        # Log mesajlarƒ± i√ßin queue
        self.log_queue = queue.Queue()
        
        # Aray√ºz olu≈ütur
        self.create_widgets()
        
        # Git durumunu kontrol et
        self.check_git_status()
        
        # Log g√ºncellemelerini ba≈ülat
        self.update_log()
        
        # Mevcut klas√∂r√ºn i√ßeriƒüini g√∂ster
        self.list_folder_contents()
        
        # Branch listesini g√ºncelle
        self.refresh_branches()

    def setup_styles(self):
        """Modern CSS-style buton ve widget stilleri tanƒ±mla"""
        style = ttk.Style()
        
        # Primary buton stili (mavi)
        style.configure("Primary.TButton",
                       background="#2563eb",
                       foreground="white",
                       borderwidth=0,
                       focuscolor="none",
                       font=("Segoe UI", 10, "bold"))
        
        style.map("Primary.TButton",
                 background=[("active", "#1d4ed8"), ("pressed", "#1e40af")],
                 foreground=[("active", "white"), ("pressed", "white")])
        
        # Accent buton stili (ye≈üil)
        style.configure("Accent.TButton",
                       background="#059669",
                       foreground="white",
                       borderwidth=0,
                       focuscolor="none",
                       font=("Segoe UI", 10, "bold"))
        
        style.map("Accent.TButton",
                 background=[("active", "#047857"), ("pressed", "#065f46")],
                 foreground=[("active", "white"), ("pressed", "white")])
        
        # Secondary buton stili (gri)
        style.configure("Secondary.TButton",
                       background="#64748b",
                       foreground="white",
                       borderwidth=0,
                       focuscolor="none",
                       font=("Segoe UI", 10))
        
        style.map("Secondary.TButton",
                 background=[("active", "#475569"), ("pressed", "#334155")],
                 foreground=[("active", "white"), ("pressed", "white")])
        
        # Progress bar stili
        style.configure("Accent.Horizontal.TProgressbar",
                       background="#2563eb",
                       troughcolor="#e2e8f0",
                       borderwidth=0,
                       lightcolor="#3b82f6",
                       darkcolor="#1d4ed8")
        
        # LabelFrame stili
        style.configure("TLabelframe",
                       background="#ffffff",
                       borderwidth=1,
                       relief="solid")
        
        style.configure("TLabelframe.Label",
                       font=("Segoe UI", 11, "bold"),
                       foreground="#1e293b",
                       background="#ffffff")
        
        # Entry stili
        style.configure("TEntry",
                       fieldbackground="#f8fafc",
                       borderwidth=1,
                       relief="solid",
                       focuscolor="#2563eb")
        
        # Combobox stili
        style.configure("TCombobox",
                       fieldbackground="#f8fafc",
                       borderwidth=1,
                       relief="solid",
                       focuscolor="#2563eb")
        
        # Frame stili
        style.configure("TFrame",
                       background="#ffffff")
        
        # Radiobutton stili
        style.configure("TRadiobutton",
                       background="#ffffff",
                       font=("Segoe UI", 10),
                       foreground="#1e293b")
        
        style.map("TRadiobutton",
                 background=[("active", "#f1f5f9"), ("selected", "#dbeafe")],
                 foreground=[("active", "#1e293b"), ("selected", "#1e40af")])
        
        # Scrollbar stili
        style.configure("Vertical.TScrollbar",
                       background="#e2e8f0",
                       troughcolor="#f1f5f9",
                       borderwidth=0,
                       arrowcolor="#64748b",
                       width=12)
        
        style.map("Vertical.TScrollbar",
                 background=[("active", "#cbd5e1"), ("pressed", "#94a3b8")],
                 arrowcolor=[("active", "#475569"), ("pressed", "#334155")])

    def create_widgets(self):
        """Modern ve derli toplu widget'larƒ± olu≈ütur"""
        # Ana scrollable canvas olu≈ütur
        canvas = tk.Canvas(self.root, bg="#ffffff", highlightthickness=0, width=860, height=760)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview, style="Vertical.TScrollbar")
        
        # Scrollable frame
        main_frame = ttk.Frame(canvas, padding="20", width=860)
        
        # Canvas scroll konfig√ºrasyonu
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Grid aƒüƒ±rlƒ±klarƒ±
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Canvas ve scrollbar yerle≈ütir
        canvas.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Canvas i√ßinde frame'i yerle≈ütir
        canvas.create_window((0, 0), window=main_frame, anchor="nw", width=860)
        
        # Scroll fonksiyonu
        def configure_scroll(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        def on_mousewheel(event):
            try:
                # Windows i√ßin delta deƒüeri
                if hasattr(event, 'delta'):
                    delta = int(-1 * (event.delta / 120))
                    canvas.yview_scroll(delta, "units")
                # Linux/Mac i√ßin delta deƒüeri
                elif hasattr(event, 'num'):
                    if event.num == 4:
                        canvas.yview_scroll(-1, "units")
                    elif event.num == 5:
                        canvas.yview_scroll(1, "units")
                # Touchpad i√ßin
                elif hasattr(event, 'delta'):
                    canvas.yview_scroll(int(-1 * event.delta), "units")
            except Exception as e:
                # Hata durumunda varsayƒ±lan scroll
                try:
                    canvas.yview_scroll(-1, "units")
                except:
                    pass
        
        # Windows i√ßin mouse wheel binding
        canvas.bind("<Configure>", configure_scroll)
        canvas.bind("<MouseWheel>", on_mousewheel)
        
        # Linux/Mac i√ßin mouse wheel binding
        canvas.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
        canvas.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
        
        # Touchpad i√ßin binding
        canvas.bind("<B1-Motion>", lambda e: canvas.yview_scroll(int(e.delta), "units"))
        
        # Alternatif mouse wheel binding'ler
        canvas.bind("<MouseWheel>", on_mousewheel, add="+")
        canvas.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"), add="+")
        canvas.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"), add="+")
        
        # Scrollbar'a da mouse wheel binding ekle
        scrollbar.bind("<MouseWheel>", on_mousewheel)
        scrollbar.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
        scrollbar.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
        
        # Scrollbar'a alternatif binding'ler
        scrollbar.bind("<MouseWheel>", on_mousewheel, add="+")
        scrollbar.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"), add="+")
        scrollbar.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"), add="+")
        
        # Keyboard scroll desteƒüi
        canvas.bind("<Up>", lambda e: canvas.yview_scroll(-1, "units"))
        canvas.bind("<Down>", lambda e: canvas.yview_scroll(1, "units"))
        canvas.bind("<Page_Up>", lambda e: canvas.yview_scroll(-10, "units"))
        canvas.bind("<Page_Down>", lambda e: canvas.yview_scroll(10, "units"))
        canvas.bind("<Home>", lambda e: canvas.yview_moveto(0))
        canvas.bind("<End>", lambda e: canvas.yview_moveto(1))
        
        # Frame geni≈üliƒüini canvas'a g√∂re ayarla
        def on_frame_configure(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        
        # Canvas boyutunu frame'e g√∂re ayarla
        def on_canvas_configure(event):
            try:
                # Canvas i√ßindeki t√ºm item'larƒ± bul
                items = canvas.find_all()
                if items:
                    # ƒ∞lk item'ƒ± (main_frame) bul ve geni≈üliƒüini ayarla
                    canvas.itemconfig(items[0], width=event.width)
            except:
                pass
        
        main_frame.bind("<Configure>", on_frame_configure)
        canvas.bind("<Configure>", on_canvas_configure)
        
        # Main frame'e de mouse wheel binding ekle
        main_frame.bind("<MouseWheel>", on_mousewheel)
        main_frame.bind("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))
        main_frame.bind("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))
        
        # Modern ba≈ülƒ±k - gradient efekti i√ßin frame
        title_frame = ttk.Frame(main_frame)
        title_frame.grid(row=0, column=0, columnspan=3, pady=(0, 30), sticky=(tk.W, tk.E))
        title_frame.columnconfigure(0, weight=1)
        
        title_label = ttk.Label(title_frame, 
                               text="üöÄ GitAuto", 
                               font=("Segoe UI", 24, "bold"),
                               foreground="#2563eb")
        title_label.grid(row=0, column=0, pady=(0, 5))
        
        subtitle_label = ttk.Label(title_frame, 
                                  text="Otomatik Git Repository Yayƒ±nlama", 
                                  font=("Segoe UI", 12),
                                  foreground="#64748b")
        subtitle_label.grid(row=1, column=0)
        
        # Proje bilgileri frame - modern card tasarƒ±mƒ±
        project_frame = ttk.LabelFrame(main_frame, text="üìÅ Proje Bilgileri", padding="20")
        project_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        project_frame.columnconfigure(1, weight=1)
        
        # Proje klas√∂r√º se√ßimi - modern input tasarƒ±mƒ±
        folder_label = ttk.Label(project_frame, text="Proje Klas√∂r√º:", font=("Segoe UI", 10, "bold"))
        folder_label.grid(row=0, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        
        self.project_path_var = tk.StringVar(value=self.current_directory)
        project_path_entry = ttk.Entry(project_frame, textvariable=self.project_path_var, 
                                     font=("Segoe UI", 10), width=45)
        project_path_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 8))
        
        browse_btn = ttk.Button(project_frame, text="üìÇ Klas√∂r Se√ß", 
                               command=self.browse_folder, style="Accent.TButton")
        browse_btn.grid(row=0, column=2, padx=(15, 0), pady=(0, 8))
        
        # Proje adƒ±
        name_label = ttk.Label(project_frame, text="Proje Adƒ±:", font=("Segoe UI", 10, "bold"))
        name_label.grid(row=1, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        project_entry = ttk.Entry(project_frame, textvariable=self.project_name, 
                                font=("Segoe UI", 10), width=45)
        project_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 8))
        
        # GitHub kullanƒ±cƒ± adƒ±
        user_label = ttk.Label(project_frame, text="GitHub Kullanƒ±cƒ±:", font=("Segoe UI", 10, "bold"))
        user_label.grid(row=2, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        username_entry = ttk.Entry(project_frame, textvariable=self.github_username, 
                                 font=("Segoe UI", 10), width=45)
        username_entry.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 8))
        
        # Commit mesajƒ±
        commit_label = ttk.Label(project_frame, text="Commit Mesajƒ±:", font=("Segoe UI", 10, "bold"))
        commit_label.grid(row=3, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        commit_entry = ttk.Entry(project_frame, textvariable=self.commit_message, 
                               font=("Segoe UI", 10), width=45)
        commit_entry.grid(row=3, column=1, sticky=(tk.W, tk.E), padx=(0, 15), pady=(0, 8))
        
        # README.md y√∂netimi frame - modern card tasarƒ±mƒ±
        readme_frame = ttk.LabelFrame(main_frame, text="üìñ README.md Y√∂netimi", padding="20")
        readme_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        readme_frame.columnconfigure(1, weight=1)
        
        # README se√ßenekleri - modern radio button tasarƒ±mƒ±
        self.readme_var = tk.StringVar(value="keep")
        readme_keep = ttk.Radiobutton(readme_frame, text="üìù Mevcut README.md'yi koru (√∂nerilen)", 
                                     variable=self.readme_var, value="keep")
        readme_keep.grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 8))
        
        readme_create = ttk.Radiobutton(readme_frame, text="üîÑ GitAuto ile yeni README.md olu≈ütur", 
                                       variable=self.readme_var, value="create")
        readme_create.grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=(0, 8))
        
        # Branch y√∂netimi frame - modern card tasarƒ±mƒ±
        branch_frame = ttk.LabelFrame(main_frame, text="üåø Branch Y√∂netimi", padding="20")
        branch_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        branch_frame.columnconfigure(1, weight=1)
        
        # Branch se√ßimi - modern input tasarƒ±mƒ±
        branch_label = ttk.Label(branch_frame, text="Hedef Branch:", font=("Segoe UI", 10, "bold"))
        branch_label.grid(row=0, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        
        self.branch_combo = ttk.Combobox(branch_frame, textvariable=self.selected_branch, 
                                        values=["main", "master", "develop"], width=25, 
                                        state="readonly", font=("Segoe UI", 10))
        self.branch_combo.grid(row=0, column=1, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        
        # Branch yenile butonu - modern icon buton
        refresh_btn = ttk.Button(branch_frame, text="üîÑ", command=self.refresh_branches, 
                                width=4, style="Accent.TButton")
        refresh_btn.grid(row=0, column=2, padx=(15, 0), pady=(0, 8))
        
        # Yeni branch olu≈ütur - modern input tasarƒ±mƒ±
        new_branch_label = ttk.Label(branch_frame, text="Yeni Branch:", font=("Segoe UI", 10, "bold"))
        new_branch_label.grid(row=1, column=0, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        
        self.new_branch_var = tk.StringVar()
        new_branch_entry = ttk.Entry(branch_frame, textvariable=self.new_branch_var, 
                                   width=25, font=("Segoe UI", 10))
        new_branch_entry.grid(row=1, column=1, sticky=tk.W, padx=(0, 15), pady=(0, 8))
        
        create_branch_btn = ttk.Button(branch_frame, text="üå± Branch Olu≈ütur", 
                                     command=self.create_new_branch, style="Accent.TButton")
        create_branch_btn.grid(row=1, column=2, padx=(15, 0), pady=(0, 8))
        
        # Buton satƒ±rƒ± - modern buton tasarƒ±mƒ±
        button_frame = ttk.Frame(branch_frame)
        button_frame.grid(row=2, column=0, columnspan=3, pady=(15, 0))
        button_frame.columnconfigure(0, weight=1)
        button_frame.columnconfigure(1, weight=1)
        
        list_branches_btn = ttk.Button(button_frame, text="üìã Branch'leri Listele", 
                                     command=self.list_branches, style="Secondary.TButton")
        list_branches_btn.grid(row=0, column=0, padx=(0, 10))
        
        clean_btn = ttk.Button(button_frame, text="üßπ Repository Temizle", 
                             command=self.clean_repository, style="Secondary.TButton")
        clean_btn.grid(row=0, column=1, padx=(10, 0))
        
        # Git durumu frame - modern card tasarƒ±mƒ±
        status_frame = ttk.LabelFrame(main_frame, text="üîç Git Durumu", padding="20")
        status_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        status_frame.columnconfigure(1, weight=1)
        
        # Git durum etiketleri - modern status tasarƒ±mƒ±
        self.git_status_label = ttk.Label(status_frame, text="Git durumu kontrol ediliyor...", 
                                        font=("Segoe UI", 10))
        self.git_status_label.grid(row=0, column=0, columnspan=2, sticky=tk.W, pady=(0, 8))
        
        self.repo_status_label = ttk.Label(status_frame, text="Repository durumu kontrol ediliyor...", 
                                         font=("Segoe UI", 10))
        self.repo_status_label.grid(row=1, column=0, columnspan=2, sticky=tk.W, pady=(0, 8))
        
        # Ana butonlar frame - modern buton tasarƒ±mƒ±
        button_main_frame = ttk.Frame(main_frame)
        button_main_frame.grid(row=5, column=0, columnspan=3, pady=(20, 0))
        button_main_frame.columnconfigure(0, weight=1)
        button_main_frame.columnconfigure(1, weight=1)
        
        # Repository baƒülama butonu - modern primary buton
        self.connect_button = ttk.Button(button_main_frame, text="üîó Repository Baƒüla", 
                                       command=self.connect_repository, style="Primary.TButton")
        self.connect_button.grid(row=0, column=0, padx=(0, 10))
        
        # Ana i≈ülem butonu - modern primary buton
        self.main_button = ttk.Button(button_main_frame, text="üöÄ Repository'yi Yayƒ±nla", 
                                     command=self.start_publication, style="Primary.TButton")
        self.main_button.grid(row=0, column=1, padx=(10, 0))
        
        # Log frame - modern card tasarƒ±mƒ±
        log_frame = ttk.LabelFrame(main_frame, text="üìã ƒ∞≈ülem Loglarƒ±", padding="20")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 20))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(6, weight=1)
        
        # Log text widget - modern text tasarƒ±mƒ±
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, width=80, 
                                                font=("Consolas", 9), 
                                                bg="#f8fafc", fg="#1e293b",
                                                insertbackground="#2563eb")
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.E, tk.S))
        
        # Progress bar - modern progress tasarƒ±mƒ±
        progress_frame = ttk.Frame(main_frame)
        progress_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        progress_frame.columnconfigure(0, weight=1)
        
        self.progress = ttk.Progressbar(progress_frame, mode='indeterminate', 
                                       style="Accent.Horizontal.TProgressbar")
        self.progress.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # Status bar - modern status tasarƒ±mƒ±
        self.status_bar = ttk.Label(progress_frame, text="Hazƒ±r", 
                                   font=("Segoe UI", 9), foreground="#64748b")
        self.status_bar.grid(row=1, column=0, sticky=tk.W)

    def check_git_status(self):
        """Git durumunu kontrol et"""
        try:
            # Git kurulum kontrol√º
            result = subprocess.run("git --version", shell=True, capture_output=True, text=True)
            self.git_installed = result.returncode == 0
            
            if self.git_installed:
                self.git_status_label.config(text="‚úÖ Git kurulu ve hazƒ±r", foreground="green")
            else:
                self.git_status_label.config(text="‚ùå Git kurulu deƒüil", foreground="red")
            
            # Repository kontrol√º
            self.git_repo_exists = os.path.exists(".git")
            if self.git_repo_exists:
                self.repo_status_label.config(text="‚úÖ Git repository mevcut", foreground="green")
            else:
                self.repo_status_label.config(text="‚ÑπÔ∏è  Git repository hen√ºz ba≈ülatƒ±lmamƒ±≈ü", foreground="blue")
                
        except Exception as e:
            self.log_message(f"‚ùå Git durum kontrol√º hatasƒ±: {e}")

    def log_message(self, message):
        """Log mesajƒ± ekle"""
        self.log_queue.put(message)

    def update_log(self):
        """Log mesajlarƒ±nƒ± g√ºncelle"""
        try:
            while True:
                message = self.log_queue.get_nowait()
                self.log_text.insert(tk.END, f"{message}\n")
                self.log_text.see(tk.END)
        except queue.Empty:
            pass
        
        # Her 100ms'de bir kontrol et
        self.root.after(100, self.update_log)

    def browse_folder(self):
        """Kullanƒ±cƒ±nƒ±n klas√∂r se√ßmesini saƒülar"""
        folder_selected = filedialog.askdirectory()
        if folder_selected:
            self.project_path_var.set(folder_selected)
            self.current_directory = folder_selected
            
            # Proje adƒ±nƒ± otomatik √∂ner
            folder_name = os.path.basename(folder_selected)
            if not self.project_name.get().strip():
                self.project_name.set(folder_name)
            
            self.log_message(f"üìÅ Proje klas√∂r√º se√ßildi: {folder_selected}")
            
            # Git durumunu yeni klas√∂r i√ßin g√ºncelle
            self.check_git_status()
            
            # Klas√∂rdeki dosyalarƒ± listele
            self.list_folder_contents()

    def validate_inputs(self):
        """Kullanƒ±cƒ± giri≈ülerini doƒürula"""
        project_name = self.project_name.get().strip()
        github_username = self.github_username.get().strip()
        
        if not project_name:
            messagebox.showerror("Hata", "Proje adƒ± bo≈ü olamaz!")
            return False
        
        if not github_username:
            messagebox.showerror("Hata", "GitHub kullanƒ±cƒ± adƒ± bo≈ü olamaz!")
            return False
        
        # Ge√ßersiz karakterleri kontrol et
        invalid_chars = [' ', '/', '\\', ':', '*', '?', '"', '<', '>', '|', '@', '{', '}']
        if any(char in project_name for char in invalid_chars):
            messagebox.showerror("Hata", f"Proje adƒ±nda ge√ßersiz karakterler var!\nGe√ßersiz: {' '.join(invalid_chars)}")
            return False
        
        if any(char in github_username for char in invalid_chars):
            messagebox.showerror("Hata", f"GitHub kullanƒ±cƒ± adƒ±nda ge√ßersiz karakterler var!\nGe√ßersiz: {' '.join(invalid_chars)}")
            return False
        
        if not os.path.exists(self.current_directory):
            messagebox.showerror("Hata", "Proje klas√∂r√º bulunamadƒ±!\nL√ºtfen ge√ßerli bir klas√∂r se√ßin.")
            return False
        
        return True

    def connect_repository(self):
        """Repository baƒülama - bo≈ü repo olu≈ütur ve first commit at"""
        if not self.validate_inputs():
            return
            
        # Onay dialog'u g√∂ster
        result = messagebox.askyesno(
            "Repository Baƒüla",
            f"üîó GitHub'da '{self.project_name.get()}' repository'si olu≈üturulacak ve baƒülanacak.\n\n"
            f"üìÅ Klas√∂r: {self.current_directory}\n"
            f"üë§ Kullanƒ±cƒ±: {self.github_username.get()}\n"
            f"üìù ƒ∞lk commit: {self.commit_message.get()}\n\n"
            "Devam etmek istiyor musunuz?"
        )
        
        if result:
            self.log_message("üîó Repository baƒülama i≈ülemi ba≈ülƒ±yor...")
            self.connect_button.config(state='disabled')
            self.main_button.config(state='disabled')
            self.progress.start()
            
            # Repository baƒülama i≈ülemini thread'de √ßalƒ±≈ütƒ±r
            threading.Thread(target=self.connect_repository_worker, daemon=True).start()
    
    def connect_repository_worker(self):
        """Repository baƒülama i≈ülemi - arka planda √ßalƒ±≈üƒ±r"""
        try:
            original_dir = os.getcwd()
            os.chdir(self.current_directory)
            
            # 1. Git init
            self.log_message("üîß Git repository ba≈ülatƒ±lƒ±yor...")
            result = subprocess.run("git init", shell=True, capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                raise Exception(f"Git init hatasƒ±: {result.stderr}")
            self.log_message("‚úÖ Git repository ba≈ülatƒ±ldƒ±")
            
            # 2. README.md olu≈ütur (eƒüer yoksa)
            if self.readme_var.get() == "create":
                readme_path = os.path.join(self.current_directory, "README.md")
                if not os.path.exists(readme_path):
                    self.log_message("üìù README.md olu≈üturuluyor...")
                    readme_content = f"# {self.project_name.get()}\n\nBu proje GitAuto ile otomatik olarak olu≈üturuldu.\n"
                    with open(readme_path, "w", encoding="utf-8") as f:
                        f.write(readme_content)
                    self.log_message("‚úÖ README.md olu≈üturuldu")
            
            # 3. Git add (b√ºy√ºk projeler i√ßin daha uzun timeout)
            self.log_message("üìÅ Dosyalar ekleniyor...")
            result = subprocess.run("git add .", shell=True, capture_output=True, text=True, timeout=60)
            if result.returncode != 0:
                raise Exception(f"Git add hatasƒ±: {result.stderr}")
            self.log_message("‚úÖ Dosyalar eklendi")
            
            # 4. Git commit (konfig√ºrasyon kontrol√º ile)
            commit_msg = self.commit_message.get().strip() or "first commit"
            self.log_message(f"üíæ ƒ∞lk commit yapƒ±lƒ±yor: {commit_msg}")
            
            # Git konfig√ºrasyonunu kontrol et ve ayarla
            self.log_message("‚öôÔ∏è Git konfig√ºrasyonu kontrol ediliyor...")
            
            # User name kontrol et
            user_result = subprocess.run("git config user.name", shell=True, capture_output=True, text=True, timeout=5)
            if user_result.returncode != 0 or not user_result.stdout.strip():
                self.log_message("üë§ Git user.name ayarlanƒ±yor...")
                subprocess.run(f'git config user.name "{self.github_username.get()}"', shell=True, capture_output=True, text=True, timeout=5)
            
            # User email kontrol et
            email_result = subprocess.run("git config user.email", shell=True, capture_output=True, text=True, timeout=5)
            if email_result.returncode != 0 or not email_result.stdout.strip():
                self.log_message("üìß Git user.email ayarlanƒ±yor...")
                subprocess.run(f'git config user.email "{self.github_username.get()}@users.noreply.github.com"', shell=True, capture_output=True, text=True, timeout=5)
            
            # Commit yap
            result = subprocess.run(f'git commit -m "{commit_msg}"', shell=True, capture_output=True, text=True, timeout=15)
            if result.returncode != 0:
                error_msg = result.stderr.strip() if result.stderr else "Bilinmeyen commit hatasƒ±"
                self.log_message(f"‚ö†Ô∏è Commit hatasƒ±: {error_msg}")
                
                # Alternatif commit y√∂ntemi dene
                self.log_message("üîÑ Alternatif commit y√∂ntemi deneniyor...")
                result = subprocess.run(f'git commit -m "{commit_msg}" --allow-empty', shell=True, capture_output=True, text=True, timeout=15)
                if result.returncode != 0:
                    raise Exception(f"Git commit hatasƒ±: {result.stderr}")
            
            self.log_message("‚úÖ ƒ∞lk commit tamamlandƒ±")
            
            # 5. Branch ayarla
            target_branch = self.selected_branch.get() or "main"
            self.log_message(f"üåø Branch '{target_branch}' ayarlanƒ±yor...")
            result = subprocess.run(f"git branch -M {target_branch}", shell=True, capture_output=True, text=True, timeout=10)
            if result.returncode != 0:
                self.log_message(f"‚ö†Ô∏è Branch ayarlama uyarƒ±sƒ±: {result.stderr}")
            else:
                self.log_message(f"‚úÖ Branch '{target_branch}' ayarlandƒ±")
            
            # 6. Remote ekle
            repo_url = f"https://github.com/{self.github_username.get()}/{self.project_name.get()}.git"
            self.log_message(f"üîó Remote repository baƒülanƒ±yor: {repo_url}")
            result = subprocess.run(f'git remote add origin "{repo_url}"', shell=True, capture_output=True, text=True, timeout=10)
            if result.returncode != 0 and "already exists" not in result.stderr:
                raise Exception(f"Remote add hatasƒ±: {result.stderr}")
            self.log_message("‚úÖ Remote repository baƒülandƒ±")
            
            # 7. Push
            self.log_message(f"üöÄ GitHub'a yayƒ±nlanƒ±yor...")
            result = subprocess.run(f"git push -u origin {target_branch}", shell=True, capture_output=True, text=True, timeout=30)
            if result.returncode != 0:
                raise Exception(f"Push hatasƒ±: {result.stderr}")
            self.log_message("‚úÖ Repository GitHub'a yayƒ±nlandƒ±!")
            
            os.chdir(original_dir)
            
            # Ba≈üarƒ± mesajƒ±
            self.root.after(0, lambda: messagebox.showinfo(
                "Ba≈üarƒ±lƒ±! üéâ",
                f"üîó Repository ba≈üarƒ±yla baƒülandƒ±!\n\n"
                f"üìç URL: https://github.com/{self.github_username.get()}/{self.project_name.get()}\n"
                f"üåø Branch: {target_branch}\n\n"
                "Artƒ±k branch i≈ülemleri yapabilir ve yayƒ±nlama yapabilirsiniz!"
            ))
            
            # Branch listesini g√ºncelle
            self.root.after(100, self.refresh_branches)
            
        except Exception as e:
            os.chdir(original_dir)
            error_msg = str(e)  # Hata mesajƒ±nƒ± string olarak sakla
            self.log_message(f"‚ùå Repository baƒülama hatasƒ±: {error_msg}")
            self.root.after(0, lambda: messagebox.showerror("Hata", f"Repository baƒülama hatasƒ±:\n{error_msg}"))
        
        finally:
            self.root.after(0, self.repository_connect_finished)
    
    def repository_connect_finished(self):
        """Repository baƒülama i≈ülemi tamamlandƒ±"""
        self.connect_button.config(state='normal')
        self.main_button.config(state='normal')
        self.progress.stop()
        self.check_git_status()

    def refresh_branches(self):
        """Ger√ßek branch'leri listele ve combo box'ƒ± g√ºncelle"""
        try:
            if not os.path.exists(os.path.join(self.current_directory, ".git")):
                self.branch_combo['values'] = ["main", "master", "develop"]
                self.log_message("‚ÑπÔ∏è Git repository hen√ºz ba≈ülatƒ±lmamƒ±≈ü - varsayƒ±lan branch'ler g√∂steriliyor")
                return
            
            original_dir = os.getcwd()
            os.chdir(self.current_directory)
            
            # Local branch'leri al
            result = subprocess.run("git branch", shell=True, capture_output=True, text=True, timeout=10)
            local_branches = []
            
            if result.returncode == 0 and result.stdout:
                for line in result.stdout.strip().split('\n'):
                    if line.strip():
                        branch = line.strip().replace('*', '').strip()
                        if branch and not branch.startswith('('):
                            local_branches.append(branch)
            
            # Remote branch'leri al
            result = subprocess.run("git branch -r", shell=True, capture_output=True, text=True, timeout=10)
            remote_branches = []
            
            if result.returncode == 0 and result.stdout:
                for line in result.stdout.strip().split('\n'):
                    if line.strip() and 'origin/' in line:
                        branch = line.strip().replace('origin/', '').strip()
                        if branch and branch != 'HEAD' and not branch.startswith('('):
                            remote_branches.append(branch)
            
            # T√ºm branch'leri birle≈ütir ve tekrarlarƒ± kaldƒ±r
            all_branches = list(set(local_branches + remote_branches))
            
            # Varsayƒ±lan branch'leri ekle
            default_branches = ["main", "master", "develop"]
            for branch in default_branches:
                if branch not in all_branches:
                    all_branches.append(branch)
            
            # Sƒ±rala
            all_branches.sort()
            
            # Combo box'ƒ± g√ºncelle
            self.branch_combo['values'] = all_branches
            
            # Mevcut branch'ƒ± se√ß
            current_result = subprocess.run("git branch --show-current", shell=True, capture_output=True, text=True, timeout=5)
            if current_result.returncode == 0 and current_result.stdout.strip():
                current_branch = current_result.stdout.strip()
                if current_branch in all_branches:
                    self.selected_branch.set(current_branch)
                    self.log_message(f"üåø Aktif branch: {current_branch}")
            
            self.log_message(f"üîÑ Branch listesi g√ºncellendi: {len(all_branches)} branch bulundu")
            
            os.chdir(original_dir)
            
        except Exception as e:
            self.log_message(f"‚ö†Ô∏è Branch listesi g√ºncellenirken hata: {e}")
            self.branch_combo['values'] = ["main", "master", "develop"]

    def clean_repository(self):
        """Repository'yi temizle - gereksiz dosyalarƒ± kaldƒ±r"""
        try:
            if not os.path.exists(os.path.join(self.current_directory, ".git")):
                messagebox.showerror("Hata", "Git repository bulunamadƒ±!")
                return
            
            # Onay al
            result = messagebox.askyesno(
                "Repository Temizle",
                "üßπ Repository temizlenecek:\n\n"
                "‚Ä¢ Gereksiz dosyalar kaldƒ±rƒ±lacak\n"
                "‚Ä¢ .gitignore g√ºncellenecek\n"
                "‚Ä¢ Git cache temizlenecek\n\n"
                "Devam etmek istiyor musunuz?"
            )
            
            if result:
                self.log_message("üßπ Repository temizleme ba≈ülatƒ±lƒ±yor...")
                
                original_dir = os.getcwd()
                os.chdir(self.current_directory)
                
                # Git cache temizle
                self.log_message("üóëÔ∏è Git cache temizleniyor...")
                subprocess.run("git gc", shell=True, capture_output=True, text=True, timeout=30)
                
                # Git ignore g√ºncelle
                gitignore_path = os.path.join(self.current_directory, ".gitignore")
                if not os.path.exists(gitignore_path):
                    self.log_message("üìù .gitignore olu≈üturuluyor...")
                    with open(gitignore_path, "w", encoding="utf-8") as f:
                        f.write("# GitAuto tarafƒ±ndan olu≈üturuldu\n")
                        f.write("node_modules/\n")
                        f.write("build/\n")
                        f.write("dist/\n")
                        f.write("*.exe\n")
                        f.write("__pycache__/\n")
                        f.write(".vscode/\n")
                        f.write("*.log\n")
                
                # Gereksiz dosyalarƒ± kaldƒ±r
                self.log_message("üìÅ Gereksiz dosyalar kaldƒ±rƒ±lƒ±yor...")
                subprocess.run("git rm -r --cached .", shell=True, capture_output=True, text=True, timeout=30)
                subprocess.run("git add .", shell=True, capture_output=True, text=True, timeout=60)
                
                # Commit (konfig√ºrasyon kontrol√º ile)
                self.log_message("üíæ Temizlik commit'i yapƒ±lƒ±yor...")
                
                # Git konfig√ºrasyonunu kontrol et
                user_result = subprocess.run("git config user.name", shell=True, capture_output=True, text=True, timeout=5)
                if user_result.returncode != 0 or not user_result.stdout.strip():
                    subprocess.run('git config user.name "GitAuto"', shell=True, capture_output=True, text=True, timeout=5)
                
                email_result = subprocess.run("git config user.email", shell=True, capture_output=True, text=True, timeout=5)
                if email_result.returncode != 0 or not email_result.stdout.strip():
                    subprocess.run('git config user.email "gitauto@users.noreply.github.com"', shell=True, capture_output=True, text=True, timeout=5)
                
                commit_result = subprocess.run('git commit -m "Repository temizlendi - GitAuto"', 
                             shell=True, capture_output=True, text=True, timeout=30)
                
                if commit_result.returncode != 0:
                    self.log_message("‚ö†Ô∏è Commit hatasƒ±, alternatif y√∂ntem deneniyor...")
                    subprocess.run('git commit -m "Repository temizlendi - GitAuto" --allow-empty', 
                                 shell=True, capture_output=True, text=True, timeout=30)
                
                os.chdir(original_dir)
                
                self.log_message("‚úÖ Repository ba≈üarƒ±yla temizlendi!")
                messagebox.showinfo("Ba≈üarƒ±lƒ±! üéâ", "Repository temizlendi!\n\nArtƒ±k daha hƒ±zlƒ± √ßalƒ±≈üacak.")
                
        except Exception as e:
            self.log_message(f"‚ùå Repository temizleme hatasƒ±: {e}")
            messagebox.showerror("Hata", f"Repository temizleme hatasƒ±:\n{e}")

    def create_new_branch(self):
        """Yeni branch olu≈ütur"""
        branch_name = self.new_branch_var.get().strip()
        if not branch_name:
            messagebox.showerror("Hata", "Branch adƒ± bo≈ü olamaz!")
            return
        
        # Ge√ßersiz karakterleri kontrol et
        invalid_chars = [' ', '/', '\\', ':', '*', '?', '"', '<', '>', '|']
        if any(char in branch_name for char in invalid_chars):
            messagebox.showerror("Hata", f"Branch adƒ±nda ge√ßersiz karakterler var!\nGe√ßersiz karakterler: {' '.join(invalid_chars)}")
            return
        
        def create_branch():
            try:
                self.log_message(f"üå± Yeni branch olu≈üturuluyor: {branch_name}")
                
                if not os.path.exists(os.path.join(self.current_directory, ".git")):
                    self.log_message("‚ùå Git repository hen√ºz ba≈ülatƒ±lmamƒ±≈ü!")
                    self.root.after(0, lambda: messagebox.showerror("Hata", "Git repository hen√ºz ba≈ülatƒ±lmamƒ±≈ü!\n√ñnce 'Repository Baƒüla' butonunu kullanƒ±n."))
                    return
                
                result = subprocess.run(f"git checkout -b {branch_name}", shell=True, 
                                     capture_output=True, text=True, cwd=self.current_directory, timeout=15)
                
                if result.returncode == 0:
                    self.log_message(f"‚úÖ Branch '{branch_name}' ba≈üarƒ±yla olu≈üturuldu!")
                    
                    # Yeni branch'i hedef branch listesine ekle
                    current_values = list(self.branch_combo['values'])
                    if branch_name not in current_values:
                        current_values.append(branch_name)
                        current_values.sort()
                        self.branch_combo['values'] = current_values
                    
                    # Yeni branch'i otomatik se√ß
                    self.selected_branch.set(branch_name)
                    self.log_message(f"üéØ Hedef branch otomatik '{branch_name}' olarak se√ßildi")
                    
                    self.new_branch_var.set("")
                    
                    # Ba≈üarƒ± mesajƒ±
                    self.root.after(0, lambda: messagebox.showinfo(
                        "Ba≈üarƒ±lƒ±! üéâ",
                        f"üå± Branch '{branch_name}' ba≈üarƒ±yla olu≈üturuldu!\n\n"
                        f"‚úÖ Otomatik olarak hedef branch se√ßildi\n"
                        f"üöÄ Artƒ±k yayƒ±nlama yapabilirsiniz"
                    ))
                    
                else:
                    error_msg = result.stderr or "Bilinmeyen hata"
                    if "already exists" in error_msg:
                        self.log_message(f"‚ö†Ô∏è Branch '{branch_name}' zaten mevcut!")
                        self.selected_branch.set(branch_name)
                        self.log_message(f"üéØ Mevcut branch '{branch_name}' hedef olarak se√ßildi")
                    else:
                        self.log_message(f"‚ùå Branch olu≈üturma hatasƒ±: {error_msg}")
                        self.root.after(0, lambda: messagebox.showerror("Hata", f"Branch olu≈üturma hatasƒ±:\n{error_msg}"))
                        
            except Exception as e:
                error_msg = str(e)  # Hata mesajƒ±nƒ± string olarak sakla
                self.log_message(f"‚ùå Branch olu≈üturma hatasƒ±: {error_msg}")
                self.root.after(0, lambda: messagebox.showerror("Hata", f"Branch olu≈üturma hatasƒ±:\n{error_msg}"))
        
        # Thread'de √ßalƒ±≈ütƒ±r
        threading.Thread(target=create_branch, daemon=True).start()

    def list_branches(self):
        """Mevcut branch'leri listele"""
        def list_branches_thread():
            try:
                self.log_message("üìã Mevcut branch'ler listeleniyor...")
                
                if not self.git_repo_exists:
                    self.log_message("‚ÑπÔ∏è  Git repository hen√ºz ba≈ülatƒ±lmamƒ±≈ü")
                    return
                
                result = subprocess.run("git branch", shell=True, capture_output=True, 
                                     text=True, cwd=self.current_directory)
                
                if result.returncode == 0 and result.stdout:
                    self.log_message("üåø Mevcut Branch'ler:")
                    self.log_message("-" * 30)
                    branches = result.stdout.strip().split('\n')
                    for branch in branches:
                        if branch.strip():
                            if branch.startswith('*'):
                                self.log_message(f"  üåü {branch.strip()} (aktif)")
                            else:
                                self.log_message(f"     {branch.strip()}")
                else:
                    self.log_message("‚ÑπÔ∏è  Hen√ºz branch bulunamadƒ±")
                    
            except Exception as e:
                self.log_message(f"‚ùå Branch listeleme hatasƒ±: {e}")
        
        threading.Thread(target=list_branches_thread, daemon=True).start()

    def start_publication(self):
        """Repository yayƒ±nlama i≈ülemini ba≈ülat"""
        # Giri≈ü kontrol√º
        if not self.project_name.get().strip():
            messagebox.showerror("Hata", "Proje adƒ± bo≈ü olamaz!")
            return
        
        if not self.github_username.get().strip():
            messagebox.showerror("Hata", "GitHub kullanƒ±cƒ± adƒ± bo≈ü olamaz!")
            return
        
        if not self.git_installed:
            messagebox.showerror("Hata", "Git kurulu deƒüil!\nL√ºtfen √∂nce Git'i y√ºkleyin: https://git-scm.com/downloads")
            return
        
        # Onay al
        project_name = self.project_name.get().strip()
        github_username = self.github_username.get().strip()
        commit_message = self.commit_message.get().strip()
        target_branch = self.selected_branch.get()
        readme_option = self.readme_var.get()
        
        confirm_text = f"""üìã Yayƒ±nlama √ñzeti:

üìÅ Proje: {project_name}
üë§ GitHub: {github_username}
üí¨ Commit: {commit_message}
üåø Branch: {target_branch}
üìñ README: {'Korunacak' if readme_option == 'keep' else 'Yeniden olu≈üturulacak'}

‚úÖ Devam edilsin mi?"""
        
        if not messagebox.askyesno("Onay", confirm_text):
            return
        
        # ƒ∞≈ülemi ba≈ülat
        self.main_button.config(state="disabled")
        self.progress.start()
        
        # Thread'de √ßalƒ±≈ütƒ±r
        threading.Thread(target=self.publish_repository, daemon=True).start()

    def publish_repository(self):
        """Repository'yi hƒ±zlƒ± ve g√ºvenli yayƒ±nla"""
        try:
            project_name = self.project_name.get().strip()
            github_username = self.github_username.get().strip()
            commit_message = self.commit_message.get().strip() or "Repository g√ºncellendi"
            target_branch = self.selected_branch.get() or "main"
            readme_option = self.readme_var.get()
            
            repo_url = f"https://github.com/{github_username}/{project_name}.git"
            
            self.log_message("üöÄ Hƒ±zlƒ± yayƒ±nlama ba≈ülatƒ±lƒ±yor...")
            
            # README.md i≈ülemi (hƒ±zlƒ±)
            readme_path = os.path.join(self.current_directory, "README.md")
            if readme_option == "create" and not os.path.exists(readme_path):
                self.log_message("üìù README.md olu≈üturuluyor...")
                readme_content = f"# {project_name}\n\nBu proje GitAuto ile otomatik olarak olu≈üturuldu.\n"
                with open(readme_path, "w", encoding="utf-8") as f:
                    f.write(readme_content)
                self.log_message("‚úÖ README.md olu≈üturuldu")
            
            # Git durumu kontrol (hƒ±zlƒ±)
            git_dir = os.path.join(self.current_directory, ".git")
            if not os.path.exists(git_dir):
                self.log_message("‚ùå Git repository bulunamadƒ±! √ñnce 'Repository Baƒüla' kullanƒ±n.")
                raise Exception("Git repository bulunamadƒ±! √ñnce 'Repository Baƒüla' kullanƒ±n.")
            
            # Deƒüi≈üiklikleri kontrol et (hƒ±zlƒ±)
            self.log_message("üîç Deƒüi≈üiklikler kontrol ediliyor...")
            status_result = subprocess.run("git status --porcelain", shell=True, capture_output=True, 
                                         text=True, cwd=self.current_directory, timeout=5)
            
            if not status_result.stdout.strip():
                self.log_message("‚ÑπÔ∏è Deƒüi≈üiklik bulunamadƒ±, sadece push yapƒ±lƒ±yor...")
                skip_commit = True
            else:
                self.log_message(f"üìÅ {len(status_result.stdout.strip().split())} deƒüi≈üiklik bulundu")
                skip_commit = False
            
            # Paralel Git i≈ülemleri
            if not skip_commit:
                # Dosyalarƒ± ekle (akƒ±llƒ± filtreleme ile)
                self.log_message("üìÅ Dosyalar ekleniyor...")
                
                # √ñnce .gitignore'ƒ± kontrol et
                gitignore_path = os.path.join(self.current_directory, ".gitignore")
                if os.path.exists(gitignore_path):
                    self.log_message("üìã .gitignore dosyasƒ± bulundu - gereksiz dosyalar filtreleniyor")
                    self.log_message("‚è≥ Bu i≈ülem b√ºy√ºk projelerde biraz zaman alabilir...")
                    result = subprocess.run("git add -A", shell=True, capture_output=True, 
                                         text=True, cwd=self.current_directory, timeout=60)
                else:
                    self.log_message("‚ö†Ô∏è .gitignore bulunamadƒ± - t√ºm dosyalar ekleniyor")
                    self.log_message("‚è≥ B√ºy√ºk proje tespit edildi - l√ºtfen bekleyin...")
                    result = subprocess.run("git add -A", shell=True, capture_output=True, 
                                         text=True, cwd=self.current_directory, timeout=120)
                
                if result.returncode != 0:
                    raise Exception(f"Git add hatasƒ±: {result.stderr}")
                self.log_message("‚úÖ Dosyalar eklendi")
                
                # Commit (hƒ±zlƒ± - konfig√ºrasyon kontrol√º ile)
                self.log_message(f"üíæ Commit yapƒ±lƒ±yor: {commit_message}")
                
                # Git konfig√ºrasyonunu kontrol et
                user_result = subprocess.run("git config user.name", shell=True, capture_output=True, text=True, cwd=self.current_directory, timeout=5)
                if user_result.returncode != 0 or not user_result.stdout.strip():
                    subprocess.run(f'git config user.name "{github_username}"', shell=True, capture_output=True, text=True, cwd=self.current_directory, timeout=5)
                
                email_result = subprocess.run("git config user.email", shell=True, capture_output=True, text=True, cwd=self.current_directory, timeout=5)
                if email_result.returncode != 0 or not email_result.stdout.strip():
                    subprocess.run(f'git config user.email "{github_username}@users.noreply.github.com"', shell=True, capture_output=True, text=True, cwd=self.current_directory, timeout=5)
                
                result = subprocess.run(f'git commit -m "{commit_message}"', shell=True, 
                                     capture_output=True, text=True, cwd=self.current_directory, timeout=10)
                if result.returncode != 0:
                    if "nothing to commit" in result.stdout.lower():
                        self.log_message("‚ÑπÔ∏è Commit edilecek deƒüi≈üiklik yok")
                    else:
                        error_msg = result.stderr.strip() if result.stderr else "Bilinmeyen commit hatasƒ±"
                        self.log_message(f"‚ö†Ô∏è Commit hatasƒ±: {error_msg}")
                        
                        # Alternatif commit y√∂ntemi dene
                        self.log_message("üîÑ Alternatif commit y√∂ntemi deneniyor...")
                        result = subprocess.run(f'git commit -m "{commit_message}" --allow-empty', shell=True, 
                                             capture_output=True, text=True, cwd=self.current_directory, timeout=10)
                        if result.returncode != 0:
                            raise Exception(f"Git commit hatasƒ±: {result.stderr}")
                else:
                    self.log_message("‚úÖ Commit tamamlandƒ±")
            
            # Remote kontrol ve g√ºncelleme (hƒ±zlƒ±)
            self.log_message("üîó Remote baƒülantƒ± kontrol ediliyor...")
            remote_result = subprocess.run("git remote get-url origin", shell=True, capture_output=True, 
                                         text=True, cwd=self.current_directory, timeout=5)
            
            if remote_result.returncode != 0 or repo_url not in remote_result.stdout:
                self.log_message("üîß Remote origin g√ºncelleniyor...")
                # Eski origin'i kaldƒ±r (sessizce)
                subprocess.run("git remote remove origin", shell=True, capture_output=True, 
                             text=True, cwd=self.current_directory, timeout=5)
                # Yeni origin ekle
                result = subprocess.run(f'git remote add origin "{repo_url}"', shell=True, 
                                     capture_output=True, text=True, cwd=self.current_directory, timeout=5)
                if result.returncode == 0:
                    self.log_message("‚úÖ Remote origin g√ºncellendi")
            else:
                self.log_message("‚úÖ Remote origin hazƒ±r")
            
            # Push (optimized - b√ºy√ºk projeler i√ßin daha uzun timeout)
            self.log_message(f"üöÄ '{target_branch}' branch'i GitHub'a yayƒ±nlanƒ±yor...")
            push_cmd = f"git push -u origin {target_branch}"
            result = subprocess.run(push_cmd, shell=True, capture_output=True, 
                                 text=True, cwd=self.current_directory, timeout=120)
            
            if result.returncode == 0:
                self.log_message("üéâ Yayƒ±nlama ba≈üarƒ±yla tamamlandƒ±!")
                self.log_message(f"üìç Repository: {repo_url.replace('.git', '')}")
                self.log_message(f"üåø Branch: {target_branch}")
                
                # Ba≈üarƒ± mesajƒ±
                self.root.after(0, lambda: messagebox.showinfo("Ba≈üarƒ±lƒ±! üéâ", 
                    f"Repository ba≈üarƒ±yla yayƒ±nlandƒ±!\n\n"
                    f"üìç URL: {repo_url.replace('.git', '')}\n"
                    f"üåø Branch: {target_branch}\n"
                    f"‚ö° Hƒ±zlƒ± yayƒ±nlama kullanƒ±ldƒ±"))
            else:
                error_msg = result.stderr.strip() if result.stderr else "Bilinmeyen hata"
                self.log_message(f"‚ùå Push hatasƒ±: {error_msg}")
                self.log_message("üí° GitHub'da repository'nin olu≈üturulduƒüundan emin olun!")
                
        except Exception as e:
            self.log_message(f"‚ùå Beklenmeyen hata: {e}")
        finally:
            # UI'ƒ± g√ºncelle
            self.root.after(0, self.publication_finished)

    def publication_finished(self):
        """Yayƒ±nlama i≈ülemi tamamlandƒ±"""
        self.main_button.config(state="normal")
        self.progress.stop()
        self.check_git_status()

    def list_folder_contents(self):
        """Se√ßilen klas√∂rdeki dosyalarƒ± listele"""
        try:
            if not os.path.exists(self.current_directory):
                return
            
            self.log_message(f"üìã Klas√∂r i√ßeriƒüi ({self.current_directory}):")
            self.log_message("-" * 50)
            
            # Dosya ve klas√∂rleri listele
            items = os.listdir(self.current_directory)
            files = []
            folders = []
            
            for item in items:
                item_path = os.path.join(self.current_directory, item)
                if os.path.isfile(item_path):
                    files.append(item)
                elif os.path.isdir(item_path):
                    folders.append(item)
            
            # Klas√∂rleri g√∂ster
            if folders:
                self.log_message("üìÅ Klas√∂rler:")
                for folder in sorted(folders):
                    self.log_message(f"  üìÅ {folder}")
            
            # Dosyalarƒ± g√∂ster
            if files:
                self.log_message("üìÑ Dosyalar:")
                for file in sorted(files):
                    # Git ve sistem dosyalarƒ±nƒ± gizle
                    if not file.startswith('.') and file not in ['__pycache__', 'node_modules']:
                        self.log_message(f"  üìÑ {file}")
            
            # README.md kontrol√º
            readme_path = os.path.join(self.current_directory, "README.md")
            if os.path.exists(readme_path):
                self.log_message("‚úÖ README.md dosyasƒ± bulundu")
                self.readme_var.set("keep")  # Otomatik olarak koru se√ßeneƒüini se√ß
            else:
                self.log_message("‚ÑπÔ∏è  README.md dosyasƒ± bulunamadƒ±")
                self.readme_var.set("create")  # Otomatik olarak olu≈ütur se√ßeneƒüini se√ß
            
            self.log_message("-" * 50)
            
        except Exception as e:
            self.log_message(f"‚ùå Klas√∂r i√ßeriƒüi listelenirken hata: {e}")

def main():
    """Ana uygulama - modern tasarƒ±m"""
    root = tk.Tk()
    
    # Modern tema ve stil ayarlarƒ±
    style = ttk.Style()
    style.theme_use('clam')
    
    # Pencere ikonu ve ba≈ülƒ±k
    try:
        root.iconbitmap("icon.ico")  # Eƒüer icon dosyasƒ± varsa
    except:
        pass  # Icon yoksa devam et
    
    # Modern pencere ayarlarƒ±
    root.configure(bg="#ffffff")
    root.option_add('*TFrame*background', '#ffffff')
    root.option_add('*TLabel*background', '#ffffff')
    
    app = GitAutoGUI(root)
    
    # Pencere kapatma olayƒ± - modern dialog
    def on_closing():
        if messagebox.askokcancel("üö™ √áƒ±kƒ±≈ü", 
                                 "GitAuto'dan √ßƒ±kmak istediƒüinizden emin misiniz?\n\n"
                                 "Kaydedilmemi≈ü deƒüi≈üiklikler kaybolabilir."):
            root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    
    # Pencereyi ekranƒ±n ortasƒ±na yerle≈ütir
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    # Pencereyi √∂ne getir
    root.lift()
    root.attributes('-topmost', True)
    root.after_idle(root.attributes, '-topmost', False)
    
    root.mainloop()

if __name__ == "__main__":
    main()

